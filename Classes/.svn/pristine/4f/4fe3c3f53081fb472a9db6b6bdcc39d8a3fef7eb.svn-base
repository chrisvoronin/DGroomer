//
//  TransactionPayment.m
//  PSA
//
//  Created by Michael Simone on 8/17/09.
//  Copyright 2009 Dropped Pin. All rights reserved.
//

#import "TransactionPayment.h"

// Static variables for compiled SQL queries. This implementation choice is to be able to share a one time
// compilation of each query across all instances of the class. Each time a query is used, variables may be bound
// to it, it will be "stepped", and then reset for the next usage. When the application begins to terminate,
// a class method will be invoked to "finalize" (delete) the compiled queries - this must happen before the database
// can be closed.
static sqlite3_stmt *init_statement = nil;
static sqlite3_stmt *hydrate_statement = nil;

@implementation TransactionPayment

@synthesize transactionPaymentID, transactionID, transactionType, transPriceAmount, transDiscAmount, transTaxedAmount, transTaxPaid;
@synthesize transTipAmount, transAmountPaid, transChange, transSubtotal, giftCertificateID, transCheckNumber;

// Finalize (delete) all of the SQLite compiled queries.
+ (void)finalizeStatements {
    if (init_statement) {
        sqlite3_finalize(init_statement);
        init_statement = nil;
    }
    if (hydrate_statement) {
        sqlite3_finalize(hydrate_statement);
        hydrate_statement = nil;
	}
}

- (id)initWithTransPaymentData:(NSInteger)transPID transIDL:(NSInteger)transID transType:(NSString*)transType tpa:(NSNumber*)tpa tda:(NSNumber*)tda tta:(NSNumber*)tta ttp:(NSNumber*)ttp ttam:(NSNumber*)ttam tap:(NSNumber*)tap tc:(NSNumber*)tc ts:(NSNumber*)ts giftCertID:(NSInteger)giftCertID tcn:(NSInteger)tcn {
	self.transactionPaymentID = transPID;
	self.transactionID = transID;
	self.transactionType = transType;
	self.transPriceAmount = tpa;
	self.transDiscAmount = tda;
	self.transTaxedAmount = tta;
	self.transTaxPaid = ttp;
	self.transTipAmount = ttam;
	self.transAmountPaid = tap;
	self.transChange = tc;
	self.transSubtotal = ts;
	self.giftCertificateID = giftCertID;
	self.transCheckNumber = tcn;
	
	return self;
}

@end
