//
//  Appointments.m
//  PSA
//
//  Created by Michael Simone on 5/31/09.
//  Copyright 2009 Dropped Pin. All rights reserved.
//

#import "Appointments.h"

// Static variables for compiled SQL queries. This implementation choice is to be able to share a one time
// compilation of each query across all instances of the class. Each time a query is used, variables may be bound
// to it, it will be "stepped", and then reset for the next usage. When the application begins to terminate,
// a class method will be invoked to "finalize" (delete) the compiled queries - this must happen before the database
// can be closed.
static sqlite3_stmt *init_statement = nil;
static sqlite3_stmt *hydrate_statement = nil;

@implementation Appointments

@synthesize appointmentID, startDateTime, endDateTime, clientName, notes, standingAppointment, startDuration, gapDuration, endDuration, serviceID, clientID;

// Finalize (delete) all of the SQLite compiled queries.
+ (void)finalizeStatements {
    if (init_statement) {
        sqlite3_finalize(init_statement);
        init_statement = nil;
    }
    if (hydrate_statement) {
        sqlite3_finalize(hydrate_statement);
        hydrate_statement = nil;
	}
}

- (id)initWithData:(NSInteger)key startTime:(NSString *)st endDateTime:(NSString *)et name:(NSString *)cn notes:(NSString*)nt standAppt:(NSInteger*)std stDur:(NSInteger*)standDur gapDur:(NSInteger*)gap endDur:(NSInteger*)endDur serviceName:(NSInteger)serv clientID:(NSInteger)cID {

	self.appointmentID = key;
	self.startDateTime = st;
	self.endDateTime = et;
	self.clientName = cn;
	self.notes = nt;
	self.standingAppointment = std;
	self.startDuration = standDur;
	self.gapDuration = gap;
	self.endDuration = endDur;
	self.serviceID = serv;
	self.clientID = cID;
	
	return self;
}

@end
