//
//  Company.m
//  PSA
//
//  Created by Michael Simone on 8/20/09.
//  Copyright 2009 Dropped Pin. All rights reserved.
//

#import "Company.h"

// Static variables for compiled SQL queries. This implementation choice is to be able to share a one time
// compilation of each query across all instances of the class. Each time a query is used, variables may be bound
// to it, it will be "stepped", and then reset for the next usage. When the application begins to terminate,
// a class method will be invoked to "finalize" (delete) the compiled queries - this must happen before the database
// can be closed.
static sqlite3_stmt *init_statement = nil;
static sqlite3_stmt *hydrate_statement = nil;


@implementation Company

@synthesize companyID, companyName, salesTax, companyAddress1, companyAddress2, companyCity, companyState, companyZipCode;
@synthesize companyEmail, companyPhone, companyFax, monthsOldAppointments, OwnerKey;

// Finalize (delete) all of the SQLite compiled queries.
+ (void)finalizeStatements {
    if (init_statement) {
        sqlite3_finalize(init_statement);
        init_statement = nil;
    }
    if (hydrate_statement) {
        sqlite3_finalize(hydrate_statement);
        hydrate_statement = nil;
	}
}

- (id)initWithCompanyData:(NSInteger)key name:(NSString*)compName tax:(NSNumber*)tax addr1:(NSString*)addr1 addr2:(NSString*)addr2 city:(NSString*)city state:(NSString*)state zip:(NSInteger)zip email:(NSString*)email phone:(NSInteger)phone fax:(NSInteger)fax appts:(NSInteger)appts owner:(NSInteger)owner {
	self.companyID = key;
	self.companyName = compName;
	self.salesTax = tax;
	self.companyAddress1 = addr1;
	self.companyAddress2 = addr2;
	self.companyCity = city;
	self.companyState = state;
	self.companyZipCode = zip;
	self.companyEmail = email;
	self.companyPhone = phone;
	self.companyFax = fax;
	self.monthsOldAppointments = appts;
	self.OwnerKey = owner;
	
	return self;
}

@end
