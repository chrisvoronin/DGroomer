//
//  ClientViewController.m
//  PSA
//
//  Created by Michael Simone on 3/5/09.
//  Copyright Dropped Pin 2009. All rights reserved.
//

#import "ClientViewController.h"
#import "Client.h"


@implementation ClientViewController

@synthesize listContent, filteredListContent, savedContent;
@synthesize myTableView, mySearchBar, myContactController, aloxxiController, apptController, gControl, rdControl;
@synthesize appDelegate;

static ClientViewController *_sharedClientViewController = nil;

+ (ClientViewController *) ClientViewSharedController
{
    if (!_sharedClientViewController)
        _sharedClientViewController = [[[self class] alloc] init];
    return _sharedClientViewController;
}

- (IBAction)cancel:(id)sender {
	[self.view removeFromSuperview];
}

- (IBAction)addClient:(id)sender {
	// Load the addClient NIB file
	if (myContactController == nil) {
		myContactController = [[AddClientContactController alloc] initWithNibName:@"AddClientContact" bundle:[NSBundle mainBundle]];
		myContactController.clientController = self;
	}
	
	[myContactController viewDidLoad];
	[self.view addSubview:myContactController.view];
}

- (void)loadClientList {
#ifdef OLD_CODE
	// Load the client list from the database
	[appDelegate loadClients];
	
	// create the master list
	if ([appDelegate.clients count] == 0)
		listContent = [[NSArray alloc] initWithObjects:	@"No Client Entries", nil];
	else {
		//Parse out the duplicates from the arrays
		Client *clients;
		NSMutableArray *newArray;
		NSString *fullName = nil;
		
		newArray = [[NSMutableArray alloc] init];
		
		//Prime the first value so we can copy it
		clients = [appDelegate.clients objectAtIndex:0];
		if (![clients.lastName isEqualToString:@" "])
			fullName = [NSString stringWithFormat:@"%@ %@", clients.firstName, clients.lastName];
		else
			fullName = [NSString stringWithFormat:@"%@", clients.firstName];
		
		[newArray addObject:fullName];
		
		for (int i=1; i < [appDelegate.clients count]; i++) {
			clients = [appDelegate.clients objectAtIndex:i];
			
			if (![clients.lastName isEqualToString:@" "])
				fullName = [NSString stringWithFormat:@"%@ %@", clients.firstName, clients.lastName];
			else
				fullName = [NSString stringWithFormat:@"%@", clients.firstName];
			
			if ([newArray containsObject:fullName])
				; //do nothing
			else
				//Add objects to the array;
				[newArray addObject:fullName];
		}
		
		listContent = [[NSArray arrayWithArray:newArray] retain];
		[newArray removeAllObjects];
		[fullName release];
	}
	
	// create our filtered list that will be the data source of our table, start its content from the master "listContent"
	filteredListContent = [[NSMutableArray alloc] initWithCapacity: [listContent count]];
	[filteredListContent addObjectsFromArray: listContent];
	[filteredListContent retain];
	
	// this stored the current list in case the user cancels the filtering
	savedContent = [[NSMutableArray alloc] initWithCapacity: [listContent count]]; 
#endif
}

#pragma mark UIViewController

- (void)viewWillAppear:(BOOL)animated
{
	
	NSIndexPath *tableSelection = [myTableView indexPathForSelectedRow];
	[myTableView deselectRowAtIndexPath:tableSelection animated:NO];
	[myTableView reloadData];
	
}

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
	
	// Use the delegate to set/get values
	appDelegate = (PSAAppDelegate *)[[UIApplication sharedApplication] delegate];
	
	// Set the background color to a nice yellow image
	self.view.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"yellow_PSA.png"]];
	self.myTableView.backgroundColor = [UIColor clearColor];
	
	// don't get in the way of user typing
	mySearchBar.autocorrectionType = UITextAutocorrectionTypeNo;
	mySearchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;
	mySearchBar.showsCancelButton = NO;
	mySearchBar.delegate = self;
	
	// Load the client list from the database
	[appDelegate loadClients];
	
	if ([appDelegate.clients count] == 0)
		listContent = [[NSArray alloc] initWithObjects:	@"No Client Entries", nil];
	
	[super viewDidLoad];

}

#pragma mark TableViewDelegate

- (UITableViewCell *)tableView:(UITableView *)aTableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [myTableView dequeueReusableCellWithIdentifier:@"TypeCell"];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:@"TypeCell"] autorelease];
    }
	
	// Load up the cell type values
	cell.textLabel.textColor = [UIColor blackColor];
	cell.textLabel.font = [UIFont italicSystemFontOfSize:16];
	cell.textLabel.textAlignment = UITextAlignmentLeft;
	cell.accessoryType = UITableViewCellSelectionStyleNone; //UITableViewCellAccessoryDisclosureIndicator;
	
	if ([appDelegate.clients count] == 0) {
		cell.textLabel.textColor = [UIColor lightGrayColor];
		cell.textLabel.font = [UIFont boldSystemFontOfSize:16];
		cell.textLabel.textAlignment = UITextAlignmentCenter;
	}
	
	NSString *clientName = @"";
	Client *cli;
	NSMutableArray *newArray = [[NSMutableArray alloc] init];
	
	// Load the group values from the database (we need this for later)
	[appDelegate loadClients];
		
	for (int i = 0; i < [appDelegate.clients count]; i++) {
		cli = [appDelegate.clients objectAtIndex:indexPath.row];
		
		if (![cli.lastName isEqualToString:@" "])
			clientName = [NSString stringWithFormat:@"%@ %@", cli.firstName, cli.lastName];
		else
			clientName = [NSString stringWithFormat:@"%@", cli.firstName];
		
		cell.textLabel.text = [NSString stringWithFormat:@"%@", clientName];
		
		[newArray addObject:clientName];
	}
		
	return cell;
}

// The table has one row for each possible type.
- (NSInteger)tableView:(UITableView *)aTableView numberOfRowsInSection:(NSInteger)section {
	[appDelegate loadClients];
	return [appDelegate.clients count];
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{		
	// don't keep the table selection
	[tableView deselectRowAtIndexPath:indexPath animated:YES];
	
	// Load the client list from the database
	[appDelegate loadClients];
	Client *cli = [appDelegate.clients objectAtIndex:indexPath.row];
	
	appDelegate.clientFirstName = appDelegate.firstName = cli.firstName;
	if (cli.lastName != nil)
		appDelegate.clientLastName = appDelegate.lastName = cli.lastName;
		
	appDelegate.clientID = cli.clientID;
	
	// open the window to see if there are edits needed
	
	[self.view removeFromSuperview];
	
	[aloxxiController viewWillAppear:YES];
	[apptController viewWillAppear:YES];
	[gControl viewWillAppear:YES];
	[rdControl viewWillAppear:YES];
	
}

- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath {
	return UITableViewCellEditingStyleDelete;
}

- (void)tableView:(UITableView *)tv commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    // If row is deleted, remove it from the list.	
    if (editingStyle == UITableViewCellEditingStyleDelete) {
		[appDelegate loadClients];
		
        // Find the book at the deleted row, and remove from application delegate's array.
		Client *cli = [appDelegate.clients objectAtIndex:indexPath.row];
        [appDelegate removeClient:cli.clientID];
		
        // Animate the deletion from the table.
        [self.myTableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
    }
}

#pragma mark UISearchBarDelegate

- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar
{
	// only show the status bar's cancel button while in edit mode
	mySearchBar.showsCancelButton = YES;
	
	// flush and save the current list content in case the user cancels the search later
	[savedContent removeAllObjects];
	[savedContent addObjectsFromArray: filteredListContent];
}

- (void)searchBarTextDidEndEditing:(UISearchBar *)searchBar
{
	mySearchBar.showsCancelButton = NO;
}

- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText
{
	[filteredListContent removeAllObjects];	// clear the filtered array first
	
	// search the table content for cell titles that match "searchText"
	// if found add to the mutable array and force the table to reload
	//
	NSString *cellTitle;
	for (cellTitle in listContent)
	{
		NSComparisonResult result = [cellTitle compare:searchText options:NSCaseInsensitiveSearch 
												 range:NSMakeRange(0, [searchText length])];
		if (result == NSOrderedSame)
		{
			[filteredListContent addObject:cellTitle];
		}
	}
	
	[myTableView reloadData];
}

// called when cancel button pressed
- (void)searchBarCancelButtonClicked:(UISearchBar *)searchBar
{
	// if a valid search was entered but the user wanted to cancel, bring back the saved list content
	if (searchBar.text.length > 0)
	{
		[filteredListContent removeAllObjects];
		[filteredListContent addObjectsFromArray: savedContent];
	}
	
	[myTableView reloadData];
	
	[searchBar resignFirstResponder];
	searchBar.text = @"";
}

// called when Search (in our case "Done") button pressed
- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar
{
	[searchBar resignFirstResponder];
}


#pragma mark Generic System Methods

// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning]; // Releases the view if it doesn't have a superview
    // Release anything that's not essential, such as cached data
}

- (void)dealloc {
	[myTableView release];
	[mySearchBar release];
	
	[listContent release];
	[filteredListContent release];
	[savedContent release];
	
    [super dealloc];
}

@end
