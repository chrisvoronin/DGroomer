//
//  TransactionDetail.m
//  PSA
//
//  Created by Michael Simone on 7/27/09.
//  Copyright 2009 Dropped Pin. All rights reserved.
//

#import "TransactionDetail.h"

// Static variables for compiled SQL queries. This implementation choice is to be able to share a one time
// compilation of each query across all instances of the class. Each time a query is used, variables may be bound
// to it, it will be "stepped", and then reset for the next usage. When the application begins to terminate,
// a class method will be invoked to "finalize" (delete) the compiled queries - this must happen before the database
// can be closed.
static sqlite3_stmt *init_statement = nil;
static sqlite3_stmt *hydrate_statement = nil;

@implementation TransactionDetail

@synthesize transactionDetailID, appointmentID, clientID, productID, serviceID, transactionID, preTaxAmount, discountedAmount, taxedAmount;
@synthesize giftCertificateID, transactionNumber;

// Finalize (delete) all of the SQLite compiled queries.
+ (void)finalizeStatements {
    if (init_statement) {
        sqlite3_finalize(init_statement);
        init_statement = nil;
    }
    if (hydrate_statement) {
        sqlite3_finalize(hydrate_statement);
        hydrate_statement = nil;
	}
}

- (id)initWithTransactionDetailData:(NSInteger)transDetailID apptID:(NSInteger)apptID cID:(NSInteger)cID prodID:(NSInteger)prodID servID:(NSInteger)sID transID:(NSInteger)transID preTax:(NSNumber*)preTax discAm:(NSNumber*)discAm taxAmount:(NSNumber*)taxA giftCertID:(NSInteger)gCertID transNum:(NSInteger)transNum {
	self.transactionDetailID = transDetailID;
	self.appointmentID = apptID;
	self.clientID = cID;
	self.productID = prodID;
	self.serviceID = sID;
	self.transactionID = transID;
	self.preTaxAmount = preTax;
	self.discountedAmount = discAm;
	self.taxedAmount = taxA;
	self.giftCertificateID = gCertID;
	self.transactionNumber = transNum;
	
	return self;
}

@end
