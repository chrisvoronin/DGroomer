//
//  WeekViewController.m
//  PSA
//
//  Created by Michael Simone on 3/5/09.
//  Copyright Dropped Pin 2009. All rights reserved.
//

#import "WeekViewController.h"
#import "PSAViewController.h"

@implementation WeekViewController

@synthesize listContent, filteredListContent, savedContent, myTableView, appoints;
@synthesize appDelegate;

- (IBAction)cancel:(id)sender {
	[self.view removeFromSuperview];
}

// Get the correct nib loaded depending on which action the user wants to take
// or take the appropriate action
- (IBAction)getCalendarEvent:(id)sender {
	
	switch ([sender selectedSegmentIndex])
	{
		case 0:	// Day
		{
			[self.view addSubview:[PSAViewController PSAViewControllerSharedController].scheduleControl.view];
			break;
		}
		case 1: // Week
		{	
			[self.view addSubview:[PSAViewController PSAViewControllerSharedController].weekControl.view];
			break;
		}
		case 2:	// Month
		{
			[self.view addSubview:[PSAViewController PSAViewControllerSharedController].monthControl.view];
			break;
		}
	}
}

- (IBAction)getCurrentDay:(id)sender {
	
}

- (IBAction)addAppointment:(id)sender {
	
    // Load the appointment nib
	[self.view addSubview:[PSAViewController PSAViewControllerSharedController].addApptController.view];
}

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
	// Use the delegate to set/get values
	appDelegate = (PSAAppDelegate *)[[UIApplication sharedApplication] delegate];
	
	// Load all the controllers
	[[PSAViewController PSAViewControllerSharedController] loadControllers];
	
	// Load all the appointments from the database
	[self loadTodaysList];
	
    [super viewDidLoad];
}

- (void)loadTodaysList {
	
	NSAutoreleasePool *localPool = [[NSAutoreleasePool alloc] init];
	
	// Load the client list from the database
	[appDelegate loadAppointments];
	
	NSString *todaysDate = nil;
	NSString *stopTime = nil;
	NSDate *firstItemDate = [[NSDate alloc] init];
	
	NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];
	[dateFormatter setDateStyle:NSDateFormatterFullStyle];
	[dateFormatter setTimeStyle:NSDateFormatterShortStyle];
	
	filteredListContent = [[NSMutableArray alloc] init];
			
	int i = 0;
	
	while (i < [appDelegate.todayAppointments count]) {
		appoints = [appDelegate.todayAppointments objectAtIndex:i];
		todaysDate = [NSString stringWithFormat:@"%@", appoints.startDateTime];
		stopTime = [NSString stringWithFormat:@"%@", appoints.endDateTime];
		
		// We need to shorten the date value to hours
		firstItemDate = [dateFormatter dateFromString:todaysDate];
		
		NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
		NSDateComponents *dateComponents = [calendar components:NSDayCalendarUnit|NSHourCalendarUnit|NSMinuteCalendarUnit fromDate:firstItemDate];
		NSInteger hour = [dateComponents hour];
		NSInteger minutes = [dateComponents minute];
		
		firstItemDate = [dateFormatter dateFromString:stopTime];
		dateComponents = [calendar components:NSDayCalendarUnit|NSHourCalendarUnit|NSMinuteCalendarUnit fromDate:firstItemDate];
		NSInteger stopHour = [dateComponents hour];
		NSInteger stopMinutes = [dateComponents minute];
								
		[filteredListContent addObject:[NSString stringWithFormat:@"%@:%@ - %@:%@ %@", [NSNumber numberWithInteger:hour], [NSNumber numberWithInteger:minutes], [NSNumber numberWithInteger:stopHour], [NSNumber numberWithInteger:stopMinutes], appoints.clientName]];

		i++;
	}
	
	if ([filteredListContent count] == 0)
		[filteredListContent addObject:@"No Appointments"];
		
	[localPool release];
}

- (void)viewWillAppear:(BOOL)animated {
	
	// Load all the appointments from the database
	[self loadTodaysList];
	
    // Remove any previous selection.
    NSIndexPath *tableSelection = [myTableView indexPathForSelectedRow];
	[myTableView deselectRowAtIndexPath:tableSelection animated:YES];
    [myTableView reloadData];
	
	[super viewWillAppear:animated];
	
}


- (void)didReceiveMemoryWarning {
	// Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
	
	// Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
	// Release any retained subviews of the main view.
	// e.g. self.myOutlet = nil;
}


- (void)dealloc {
    [super dealloc];
}

#pragma mark -
#pragma mark TableViewDelegate

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
	// Create a date formatter to convert the date to a string format.		
	NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];
	[dateFormatter setDateStyle:NSDateFormatterFullStyle];
	
	NSDate *date =[NSDate date];			
	NSArray *daysOfTheWeek = [NSArray arrayWithObjects:[dateFormatter stringFromDate:date],nil];
	
	return [daysOfTheWeek objectAtIndex:section];
}

- (UITableViewCell *)tableView:(UITableView *)aTableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [myTableView dequeueReusableCellWithIdentifier:@"TypeCell"];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:@"TypeCell"] autorelease];
    }
	
	// Load up the cell type values
	cell.textLabel.textColor = [UIColor blackColor];
	cell.textLabel.font = [UIFont italicSystemFontOfSize:12];
	cell.textLabel.textAlignment = UITextAlignmentLeft;
	cell.accessoryType = UITableViewCellSelectionStyleNone; //UITableViewCellAccessoryDisclosureIndicator;
	
	if ([appDelegate.todayAppointments count] == 0) {
		cell.textLabel.textColor = [UIColor lightGrayColor];
		cell.textLabel.font = [UIFont boldSystemFontOfSize:16];
		cell.textLabel.textAlignment = UITextAlignmentCenter;
	}
	
	cell.textLabel.text = [filteredListContent objectAtIndex:indexPath.row];
	
	return cell;
}

// The table has one row for each possible type.
- (NSInteger)tableView:(UITableView *)aTableView numberOfRowsInSection:(NSInteger)section {
	return [filteredListContent count];
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{		
	// don't keep the table selection
	[tableView deselectRowAtIndexPath:indexPath animated:YES];
	
}

- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath {
	return UITableViewCellEditingStyleDelete;
}

#ifdef OLD_CODE
- (void)tableView:(UITableView *)tv commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    // If row is deleted, remove it from the list.	
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Find the book at the deleted row, and remove from application delegate's array.
        [appDelegate removeClientFromSchedule:[filteredListContent objectAtIndex:indexPath.row]];
        // Animate the deletion from the table.
		[filteredListContent removeObjectAtIndex:indexPath.row];
        [self.myTableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
    }
}
#endif

@end